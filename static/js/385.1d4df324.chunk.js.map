{"version":3,"file":"static/js/385.1d4df324.chunk.js","mappings":"iNAGaA,EAAYC,EAAAA,GAAAA,GAAH,iFAMTC,GAAWD,EAAAA,EAAAA,IAAOE,EAAAA,GAAPF,CAAH,2M,SCJRG,EAAa,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACrBC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,SAACP,EAAD,UACGK,EAAMG,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAP,OACT,yBACE,SAACR,EAAD,CAAUS,GAAE,kBAAaF,GAAMG,MAAO,CAAEC,KAAMP,GAA9C,SACGI,KAFID,EADA,KAShB,C,8LCjBDK,EAAAA,EAAAA,SAAAA,QAAyB,6BACzB,IAAMC,EAAW,mCAEJC,EAAkB,mCAAG,8FAC1BF,EAAAA,EAAAA,IAAA,wCAA2CC,IADjB,mFAAH,qDAGlBE,EAAgB,mCAAG,WAAMC,GAAN,iFACxBJ,EAAAA,EAAAA,IAAA,kCAAqCC,EAArC,kBAAuDG,IAD/B,mFAAH,sDAGhBC,EAAa,mCAAG,WAAMC,GAAN,iFACrBN,EAAAA,EAAAA,IAAA,mBAAsBM,EAAtB,oBAAyCL,IADpB,mFAAH,sDAGbM,EAAY,mCAAG,WAAMD,GAAN,iFACpBN,EAAAA,EAAAA,IAAA,mBAAsBM,EAAtB,4BAAiDL,IAD7B,mFAAH,sDAGZO,EAAS,mCAAG,WAAMF,GAAN,iFACjBN,EAAAA,EAAAA,IAAA,mBAAsBM,EAAtB,4BAAiDL,IADhC,mFAAH,qD,kJCfTQ,EAAQtB,EAAAA,GAAAA,MAAH,iJAOLuB,EAASvB,EAAAA,GAAAA,OAAH,uQ,SCLNwB,EAAY,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC1B,GAAmCC,EAAAA,EAAAA,MAA3BC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,aAElB,OACE,kBAAMH,SAAUG,GAFK,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OAAeJ,EAASI,EAAxB,IAErB,WACE,SAACP,GAAD,QAAOQ,KAAK,QAAWH,EAAS,YAChC,SAACJ,EAAD,CAAQO,KAAK,SAAb,sBAGL,E,SCuBD,EA7Be,WACb,OAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAO3B,EAAP,KAAc4B,EAAd,KACA,GAA0BD,EAAAA,EAAAA,UAAS,IAAnC,eAAOE,EAAP,KAAcC,EAAd,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAQF,EAAaG,IAAI,SAiB/B,OAdAC,EAAAA,EAAAA,YAAU,WACHF,IAGLJ,EAAS,KAETlB,EAAAA,EAAAA,IAAiBsB,GACdG,MAAK,SAAAC,GAAI,OAAIV,EAASU,EAAKA,KAAKC,QAAvB,IACTC,OAAM,SAAAX,GACLC,EAAS,yBACTW,QAAQC,IAAIb,EAAMc,QACnB,IACJ,GAAE,CAACT,KAGF,iCACE,SAACd,EAAD,CAAWC,SAjBK,SAAAI,GAAK,OAAIQ,EAAgB,CAAEC,MAAOT,EAAMmB,QAAnC,IAkBpBf,GAAQ,uBAAIA,KAAa,SAAC9B,EAAA,EAAD,CAAYC,MAAOA,MAGlD,C","sources":["components/MoviesList/MoviesList.styles.jsx","components/MoviesList/MoviesList.jsx","components/service/API.jsx","components/SearchBar/SearchBar.styles.jsx","components/SearchBar/SearchBar.jsx","pages/Movies.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const FilmsList = styled.ul`\n  display: grid;\n  grid-gap: 4px;\n  margin-top: 20px;\n`;\n\nexport const FilmLink = styled(Link)`\n  color: #000;\n  font-weight: 500;\n  text-decoration: none;\n  &:hover,\n  &:focus {\n    color: rgba(85, 26, 139, 0.7);\n  }\n  &:visited {\n    color: rgb(85, 26, 139);\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { useLocation } from 'react-router-dom';\n\nimport { FilmsList, FilmLink } from './MoviesList.styles';\n\nexport const MoviesList = ({ films }) => {\n  const location = useLocation();\n\n  return (\n    <FilmsList>\n      {films.map(({ id, title }) => (\n        <li key={id}>\n          <FilmLink to={`/movies/${id}`} state={{ from: location }}>\n            {title}\n          </FilmLink>\n        </li>\n      ))}\n    </FilmsList>\n  );\n};\n\nMoviesList.propTypes = {\n  films: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n};\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org';\nconst AUTH_KEY = '234e7b4c27db682739301b8b46dc0452';\n\nexport const fetchTrendingFilms = async () =>\n  await axios.get(`/3/trending/movie/day?api_key=${AUTH_KEY}`);\n\nexport const fetchFilmsByName = async name =>\n  await axios.get(`/3/search/movie?api_key=${AUTH_KEY}&query=${name}`);\n\nexport const fetchFilmById = async movieId =>\n  await axios.get(`/3/movie/${movieId}?api_key=${AUTH_KEY}`);\n\nexport const fetchReviews = async movieId =>\n  await axios.get(`/3/movie/${movieId}/reviews?api_key=${AUTH_KEY}`);\n\nexport const fetchCast = async movieId =>\n  await axios.get(`/3/movie/${movieId}/credits?api_key=${AUTH_KEY}`);\n","import styled from 'styled-components';\n\nexport const Input = styled.input`\n  margin-left: 8px;\n  border: 1px solid rgb(85, 26, 139);\n  border-radius: 4px;\n  padding: 4px 8px;\n  width: 240px;\n`;\nexport const Button = styled.button`\n  margin-left: 4px;\n  padding: 4px 16px;\n  border: 0;\n  border-radius: 4px;\n  color: #ffffff;\n  background-color: rgb(85, 26, 139);\n\n  cursor: pointer;\n\n  &:hover,\n  &:focus {\n    background-color: rgba(85, 26, 139, 0.7);\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { useForm } from 'react-hook-form';\nimport { Input, Button } from './SearchBar.styles';\n\nexport const SearchBar = ({ onSubmit }) => {\n  const { register, handleSubmit } = useForm();\n  const onSearchSubmit = ({ value }) => onSubmit(value);\n  return (\n    <form onSubmit={handleSubmit(onSearchSubmit)}>\n      <Input type=\"text\" {...register('value')} />\n      <Button type=\"submit\">Search</Button>\n    </form>\n  );\n};\n\nSearchBar.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { fetchFilmsByName } from 'components/service/API';\n\nimport { SearchBar } from '../components/SearchBar/SearchBar';\nimport { MoviesList } from '../components/MoviesList/MoviesList';\n\nconst Movies = () => {\n  const [films, setFilms] = useState([]);\n  const [error, setError] = useState('');\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query');\n\n  const updateQuery = value => setSearchParams({ query: value.trim() });\n  useEffect(() => {\n    if (!query) {\n      return;\n    }\n    setError('');\n\n    fetchFilmsByName(query)\n      .then(data => setFilms(data.data.results))\n      .catch(error => {\n        setError('Oops, something wrong');\n        console.log(error.message);\n      });\n  }, [query]);\n\n  return (\n    <>\n      <SearchBar onSubmit={updateQuery} />\n      {error ? <p>{error}</p> : <MoviesList films={films} />}\n    </>\n  );\n};\n\nexport default Movies;\n"],"names":["FilmsList","styled","FilmLink","Link","MoviesList","films","location","useLocation","map","id","title","to","state","from","axios","AUTH_KEY","fetchTrendingFilms","fetchFilmsByName","name","fetchFilmById","movieId","fetchReviews","fetchCast","Input","Button","SearchBar","onSubmit","useForm","register","handleSubmit","value","type","useState","setFilms","error","setError","useSearchParams","searchParams","setSearchParams","query","get","useEffect","then","data","results","catch","console","log","message","trim"],"sourceRoot":""}